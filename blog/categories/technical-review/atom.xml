<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technical-review | Andy Lin]]></title>
  <link href="http://andylinid45.github.io/blog/categories/technical-review/atom.xml" rel="self"/>
  <link href="http://andylinid45.github.io/"/>
  <updated>2014-09-25T02:26:07+08:00</updated>
  <id>http://andylinid45.github.io/</id>
  <author>
    <name><![CDATA[Andy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Haml Sucks]]></title>
    <link href="http://andylinid45.github.io/blog/2014/04/26/why-haml-sucks/"/>
    <updated>2014-04-26T23:16:54+08:00</updated>
    <id>http://andylinid45.github.io/blog/2014/04/26/why-haml-sucks</id>
    <content type="html"><![CDATA[<p><blockquote><p>Beautiful, DRY, well-indented, clear markup</p><footer><strong>haml <a href="http://haml.info">http://haml.info</a></strong></footer></blockquote></p>

<p>You can see how haml selling himself to you at his website.</p>

<p>But after using haml for sometime. I feel it sucks.</p>

<p>There also many blog post telling you how suck haml does.</p>

<p>But here, I want to get the point. It just because this technique is totally unnecessary.</p>

<p>Building a web app is like playing lego toy bricks. No need to pick up all bricks in the worlk to make a great web app.</p>

<p>Haml is just anohter beauty lie in the technical world.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angularjs vs Emberjs vs Backbonejs]]></title>
    <link href="http://andylinid45.github.io/blog/2014/04/23/angularjs-vs-emberjs-vs-backbonejs/"/>
    <updated>2014-04-23T17:12:15+08:00</updated>
    <id>http://andylinid45.github.io/blog/2014/04/23/angularjs-vs-emberjs-vs-backbonejs</id>
    <content type="html"><![CDATA[<p>Many blog post compare these three javascript libraries. But I dont think they get the point.</p>

<h3>1) Two way data binding</h3>

<p>Backbonejs does not support two way data bingding native. (You can use a plugin like backbone.stickit <a href="http://nytimes.github.io/backbone.stickit/">http://nytimes.github.io/backbone.stickit/</a>)</p>

<p>Why two way data binding is so important? Because it help you auto update the view in most cases. It helps you minimize your code.</p>

<h3>2) Dependency injection using directive</h3>

<p>Emberjs does not support DI(Dependency injection), so you need to write more code such as
```
Todos.EditTodoView = Ember.TextField.extend({  &hellip;</p>

<p>Todos.TodoController = Ember.ObjectController.extend({ &hellip;
```</p>

<p>If you use DI, then you code is plain old javascritp object. and easy to test.</p>

<p>Because of these two main reasons, Angularjs can help you minimize your code. <br/>
Checkout <a href="http://todomvc.com/">http://todomvc.com/</a> , a web site helping you select a javascript framework.</p>

<ul>
<li><a href="https://github.com/tastejs/todomvc/tree/gh-pages/architecture-examples/backbone">https://github.com/tastejs/todomvc/tree/gh-pages/architecture-examples/backbone</a></li>
<li><a href="https://github.com/tastejs/todomvc/tree/gh-pages/architecture-examples/emberjs">https://github.com/tastejs/todomvc/tree/gh-pages/architecture-examples/emberjs</a></li>
<li><a href="https://github.com/tastejs/todomvc/tree/gh-pages/architecture-examples/angularjs">https://github.com/tastejs/todomvc/tree/gh-pages/architecture-examples/angularjs</a></li>
</ul>


<p>We can see how many line of code need these three javascript framework to make a same app.</p>

<p>so, Angularjs win!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Assets Gem vs Bower]]></title>
    <link href="http://andylinid45.github.io/blog/2014/04/21/rails-assets-gem-vs-using-bower/"/>
    <updated>2014-04-21T01:26:18+08:00</updated>
    <id>http://andylinid45.github.io/blog/2014/04/21/rails-assets-gem-vs-using-bower</id>
    <content type="html"><![CDATA[<p>There are many ways to manage assets in rails.</p>

<h2>let us compare these two ways.</h2>

<h3>1)use rails assets gem. <a href="https://rails-assets.org/">https://rails-assets.org/</a></h3>

<p>Rails Assets is the frictionless proxy between Bundler and Bower.</p>

<p>it need to add a gem source to your gem file
<code>
source 'https://rails-assets.org'
</code></p>

<p>and add assets like this to gem file
<code>
gem 'rails-assets-BOWER_PACKAGE_NAME'
</code></p>

<h3>2)use bower directly</h3>

<h3>use bower directly win!</h3>

<p>I think rails-assets adds an unnecessary layer.
I want to make things simple.</p>

<p>PS: there is a gem called &lsquo;bower-rails&rsquo;, helping you use bower.</p>

<p>It provides a DSL configuration in Bowerfile at the project&rsquo;s root similar to Bundler.</p>

<p>But I think this gem also add an unnecessary layer. so DON&rsquo;T use this gem! It just wastes your time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rbenv vs Rvm]]></title>
    <link href="http://andylinid45.github.io/blog/2014/04/16/rbenv-vs-rvm/"/>
    <updated>2014-04-16T15:51:14+08:00</updated>
    <id>http://andylinid45.github.io/blog/2014/04/16/rbenv-vs-rvm</id>
    <content type="html"><![CDATA[<p>rbenv win.</p>

<p>because no gemsets in rbenv. rbenv make things simple.</p>

<p>rvm is over-design.</p>
]]></content>
  </entry>
  
</feed>
