<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Production | Andy Lin]]></title>
  <link href="http://andylinid45.github.io/blog/categories/production/atom.xml" rel="self"/>
  <link href="http://andylinid45.github.io/"/>
  <updated>2024-03-16T08:36:15+00:00</updated>
  <id>http://andylinid45.github.io/</id>
  <author>
    <name><![CDATA[Andy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install Wireguard in Ubuntu 23.10]]></title>
    <link href="http://andylinid45.github.io/blog/2024/03/09/install-wireguard-in-ubuntu-23-dot-10/"/>
    <updated>2024-03-09T18:21:51+00:00</updated>
    <id>http://andylinid45.github.io/blog/2024/03/09/install-wireguard-in-ubuntu-23-dot-10</id>
    <content type="html"><![CDATA[<p>install wireguard
```
sudo apt-get update
sudo apt install wireguard</p>

<p>echo &ldquo;net.ipv4.ip_forward=1&rdquo; >> /etc/sysctl.conf
echo &ldquo;net.ipv4.conf.all.forwarding=1&rdquo; >> /etc/sysctl.conf
echo &ldquo;net.ipv6.conf.all.forwarding=1&rdquo; >> /etc/sysctl.conf
sysctl -p
```</p>

<p>Create server and client at the same time.
nano create_wg.py and run it: python3 create_wg.py
```</p>

<h1>run as root</h1>

<p>from subprocess import run
from os.path import exists
import shutil</p>

<p>ip = run(&ldquo;ip -4 addr | sed -ne &rsquo;s|^.<em> inet \([^/]</em>\)/.<em> scope global.</em>$|\1|p' | head -1&rdquo;, shell=True, capture_output=True, text=True).stdout.strip()
print(f"Your server public ip is {ip}&ldquo;)</p>

<p>subnet = input(&ldquo;What is your subnet? default is 38\n&rdquo;)
subnet = int(subnet) if subnet else 38</p>

<p>count = input(&ldquo;How many clients would you like to create? default is 18\n&rdquo;)
count = int(count) if count else 18</p>

<p>for num in range(1, count + 1):</p>

<pre><code>config_file_name = f"wg{subnet:02d}.{num:02d}"
client_folder = f"wg{subnet:02d}"
port = f"1{subnet:02d}{num:02d}"
net = f"10.{subnet}.{num}"

private = run("wg genkey", shell=True, capture_output=True, text=True).stdout.strip()
public = run(f"echo {private} | wg pubkey", shell=True, capture_output=True, text=True).stdout.strip()

client_private = run("wg genkey", shell=True, capture_output=True, text=True).stdout.strip()
client_public = run(f"echo {client_private} | wg pubkey", shell=True, capture_output=True, text=True).stdout.strip()

run(f"systemctl stop wg-quick@{config_file_name}.service", shell=True)
run(f"systemctl disable wg-quick@{config_file_name}.service", shell=True)

config = f"""
</code></pre>

<p>[Interface]
Address = {net}.1/32
ListenPort = {port}
PrivateKey = {private}
SaveConfig = false
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE</p>

<p>[Peer]
PublicKey = {client_public}
AllowedIPs = {net}.2/32
&ldquo;&rdquo;"</p>

<pre><code>client_config = f"""
</code></pre>

<p>[Interface]
PrivateKey = {client_private}
Address = {net}.2/32
DNS = 208.67.222.222, 208.67.220.220</p>

<p>[Peer]
PublicKey = {public}
AllowedIPs = 0.0.0.0/0, ::/0
Endpoint = {ip}:{port}
PersistentKeepalive = 25
&ldquo;&rdquo;"</p>

<pre><code>if not exists(f"/etc/wireguard/{client_folder}"):
    run(f"mkdir /etc/wireguard/{client_folder}", shell=True)

with open(f"/etc/wireguard/{config_file_name}.conf", "w", encoding="utf-8") as file:
    file.write(config)

with open(f"/etc/wireguard/{client_folder}/{config_file_name}.conf", "w", encoding="utf-8") as file:
    file.write(client_config)

run(f"systemctl enable wg-quick@{config_file_name}.service", shell=True)
run(f"systemctl start wg-quick@{config_file_name}.service", shell=True)
</code></pre>

<p>shutil.make_archive(f"/etc/wireguard/{client_folder}&ldquo;, &lsquo;zip&rsquo;, f&rdquo;/etc/wireguard/{client_folder}&ldquo;)
```</p>

<p>Delete server, nano delete_wg.py, and run it : python3 delete_wg.py
```</p>

<h1>run as root</h1>

<p>from subprocess import run
from os.path import exists</p>

<p>def delete_service_by_name(name):</p>

<pre><code>if exists(f"/etc/wireguard/{name}.conf"):
    run(f"systemctl stop wg-quick@{name}.service", shell=True)
    run(f"systemctl disable wg-quick@{name}.service", shell=True)
    run(f"rm /etc/wireguard/{name}.conf", shell=True)
</code></pre>

<p>def delete_service_by_subnet(subnet):</p>

<pre><code>for num in range(1, 99):
    delete_service_by_name(f"wg{subnet:02d}.{num:02d}")
run(f"rm /etc/wireguard/wg{subnet:02d}.zip", shell=True)    
run(f"rm /etc/wireguard/wg{subnet:02d} -r", shell=True)
</code></pre>

<p>subnet = input(&ldquo;Which subnet do you want to delete?\n&rdquo;)
if subnet:</p>

<pre><code>delete_service_by_subnet(int(subnet))
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disable Ipv6 in Ubuntu 21.04]]></title>
    <link href="http://andylinid45.github.io/blog/2022/05/09/disable-ipv6-in-ubuntu-21-dot-04/"/>
    <updated>2022-05-09T20:54:20+00:00</updated>
    <id>http://andylinid45.github.io/blog/2022/05/09/disable-ipv6-in-ubuntu-21-dot-04</id>
    <content type="html"><![CDATA[<p>```
sudo nano /etc/sysctl.conf</p>

<h1>add in the end of the file</h1>

<p>net.ipv6.conf.all.disable_ipv6=1
net.ipv6.conf.default.disable_ipv6=1
net.ipv6.conf.lo.disable_ipv6=1
```</p>

<p>```
sudo sysctl -p</p>

<h1>check it</h1>

<p>ip a
```</p>

<p>```
sudo nano /etc/rc.local</p>

<h1>create a new file</h1>

<h1>!/bin/bash</h1>

<h1>/etc/rc.local</h1>

<p>/etc/sysctl.d
/etc/init.d/procps restart</p>

<p>exit 0
```</p>

<p>```
sudo chmod 755 /etc/rc.local</p>

<p>sudo reboot
```</p>

<p><a href="https://itsfoss.com/disable-ipv6-ubuntu-linux/">https://itsfoss.com/disable-ipv6-ubuntu-linux/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Python Proxy]]></title>
    <link href="http://andylinid45.github.io/blog/2021/07/08/using-python-proxy/"/>
    <updated>2021-07-08T05:56:38+00:00</updated>
    <id>http://andylinid45.github.io/blog/2021/07/08/using-python-proxy</id>
    <content type="html"><![CDATA[<p>```</p>

<h1>setup client in windows 10</h1>

<p>winget install python</p>

<h1>reopen terminal</h1>

<p>pip3 install pproxy
pproxy -r socks5://serverIp:18080#youruser:yourpass &mdash;sys -vv
```</p>

<p>```</p>

<h1>setup server in ubuntu 21.04</h1>

<p>pip3 install pproxy
useradd &mdash;no-create-home -s /usr/sbin/nologin pproxy</p>

<p>cd /etc/init.d/
wget <a href="https://raw.githubusercontent.com/fhd/init-script-template/master/template">https://raw.githubusercontent.com/fhd/init-script-template/master/template</a>
mv template my-proxy
chmod +x my-proxy
nano my-proxy
```</p>

<p>```</p>

<h1>nano my-proxy</h1>

<p>dir=&ldquo;/usr/local/bin&rdquo;
cmd=&ldquo;pproxy -l socks5://:18080#youruser:yourpass -v&rdquo;
user=&ldquo;pproxy&rdquo;
```</p>

<p><code>
/etc/init.d/my-proxy start
sudo update-rc.d my-proxy defaults
</code></p>

<p><code>
https://github.com/qwj/python-proxy
https://github.com/fhd/init-script-template
https://stackoverflow.com/questions/7221757/run-automatically-program-on-startup-under-linux-ubuntu
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Kms]]></title>
    <link href="http://andylinid45.github.io/blog/2021/06/19/setup-kms/"/>
    <updated>2021-06-19T15:19:13+00:00</updated>
    <id>http://andylinid45.github.io/blog/2021/06/19/setup-kms</id>
    <content type="html"><![CDATA[<p>Server
<code>
git clone https://github.com/SystemRage/py-kms.git
cd py-kms/py-kms/
nohup python3 pykms_Server.py &amp;
</code></p>

<p>With Python 3.10 Sequence has been moved to collections.abc
nano py-kms/py-kms/Etrigan.py
```</p>

<h1>change</h1>

<p>from collections import Sequence</p>

<h1>to</h1>

<p>from collections.abc import Sequence
```</p>

<p>in windows
```
// change your key in the page <a href="https://py-kms.readthedocs.io/en/latest/Keys.html#windows">https://py-kms.readthedocs.io/en/latest/Keys.html#windows</a>
cd C:\Windows\system32>
C:\Windows\system32>slmgr /ipk BB6NG-PQ82V-VRDPW-8XVD2-V8P66
C:\Windows\system32>slmgr /skms 10.8.0.1
C:\Windows\system32>slmgr /ato</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup TCP Tunnel]]></title>
    <link href="http://andylinid45.github.io/blog/2020/06/28/setup-tcp-tunnel/"/>
    <updated>2020-06-28T21:52:01+00:00</updated>
    <id>http://andylinid45.github.io/blog/2020/06/28/setup-tcp-tunnel</id>
    <content type="html"><![CDATA[<p>Server
```
sudo snap install go &mdash;classic
go get -v github.com/jpillora/chisel</p>

<p>crontab -e
@reboot /root/go/bin/chisel server -p 9312 &mdash;socks5 &mdash;pid -v &mdash;key supperkey &mdash;auth user:pass &amp;</p>

<h1>change your supperkey, user and pass</h1>

<p>```</p>

<p>Client
```
sudo snap install go &mdash;classic
go get -v github.com/jpillora/chisel
~/go/bin/chisel client -fingerprint 12:34:56 &mdash;auth user:pass vps:9312 socks</p>

<h1>change your fingerprint, user and pass</h1>

<h1>Point your SOCKS5 clients (e.g. OS/Browser) to:  localhost:1080</h1>

<p>```</p>

<p>socks5.sh in ubuntu
```
gsettings set org.gnome.system.proxy mode &lsquo;manual&rsquo;
gsettings set org.gnome.system.proxy.socks host &lsquo;localhost&rsquo;
gsettings set org.gnome.system.proxy.socks port 1080
gsettings set org.gnome.system.proxy ignore-hosts &ldquo;[&lsquo;localhost&rsquo;, &lsquo;127.0.0.0/8&rsquo;, &lsquo;::1&rsquo;]&rdquo;</p>

<p>finish() {
  echo &lsquo;  Trapped Ctrl-C, socks5 down!&rsquo;
  gsettings set  org.gnome.system.proxy mode &lsquo;none&rsquo;
}</p>

<p>trap finish EXIT</p>

<p>~/go/bin/chisel client -fingerprint 12:34:56 &mdash;auth user:pass -v vps:9312 socks
```</p>
]]></content>
  </entry>
  
</feed>
