<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ubuntu | Andy Lin]]></title>
  <link href="http://andylinid45.github.io/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://andylinid45.github.io/"/>
  <updated>2019-03-22T10:11:14+08:00</updated>
  <id>http://andylinid45.github.io/</id>
  <author>
    <name><![CDATA[Andy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install Docker in Ubuntu 16.04]]></title>
    <link href="http://andylinid45.github.io/blog/2019/01/30/install-docker-in-ubuntu-16-dot-04/"/>
    <updated>2019-01-30T16:54:02+08:00</updated>
    <id>http://andylinid45.github.io/blog/2019/01/30/install-docker-in-ubuntu-16-dot-04</id>
    <content type="html"><![CDATA[<p>install docker
```</p>

<h1>install required packages</h1>

<p>sudo apt-get install \
   apt-transport-https \
   ca-certificates \
   curl \
   software-properties-common</p>

<h1>get the GPG key for docker</h1>

<p>curl -fsSL <a href="https://download.docker.com/linux/ubuntu/gpg">https://download.docker.com/linux/ubuntu/gpg</a> | \
   sudo apt-key add &ndash;</p>

<h1>validating the docker GPG key is installed</h1>

<p>sudo apt-key fingerprint 0EBFCD88</p>

<h1>adding the docker repository</h1>

<p>sudo add-apt-repository \
   &ldquo;deb [arch=amd64] <a href="https://download.docker.com/linux/ubuntu">https://download.docker.com/linux/ubuntu</a> \
   $(lsb_release -cs) \
   stable&rdquo;</p>

<h1>update apt-get libraries again</h1>

<p>sudo apt-get update</p>

<h1>install docker</h1>

<p>sudo apt-get install docker-ce</p>

<h1>validate install with version command</h1>

<p>docker &mdash;version</p>

<h1>validating functionality by running a container</h1>

<p>sudo docker run hello-world
```</p>

<p>install docker-compose
```
sudo curl -L &ldquo;<a href="https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$">https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$</a>(uname -s)&ndash;$(uname -m)&rdquo; -o /usr/local/bin/docker-compose</p>

<p>sudo chmod +x /usr/local/bin/docker-compose
```</p>

<p>install portainer as a GUI manager
```
sudo docker image pull portainer/portainer
sudo docker image ls</p>

<p>sudo docker container run -d \
 -p 9000:9000 \
 -v /var/run/docker.sock:/var/run/docker.sock \
 portainer/portainer
```</p>

<p>useful command
```
sudo docker image pull hello-world
sudo docker image ls</p>

<p>sudo docker container ps
sudo docker container ls -a
sudo docker container rm &mdash;force $(docker container ls &mdash;all &mdash;quiet) # remove all
sudo docker container run &mdash;detach &mdash;name web-server &mdash;rm nginx
sudo docker container run &mdash;detach -it &mdash;name web-server1 -p 80:80 nginx
sudo docker container run -it ubuntu bash
sudo docker container exec web-server1 cat /etc/debian_version
sudo docker container stop web-server
sudo docker container inspect web-server # docker detail
sudo docker container inspect &mdash;format &lsquo;&rsquo; web-server1 | jq
sudo docker container stats
sudo docker container stats web-server1 web-server2</p>

<p>sudo docker search ubuntu
sudo docker volume  ls
sudo docker system info
sudo docker network ls</p>

<p>docker-compose start
docker-compose stop
docker-compose restart
docker-compose pause
docker-compose unpause
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuration of the Rsync Daemon]]></title>
    <link href="http://andylinid45.github.io/blog/2018/10/11/configuration-of-the-rsync-daemon/"/>
    <updated>2018-10-11T17:30:09+08:00</updated>
    <id>http://andylinid45.github.io/blog/2018/10/11/configuration-of-the-rsync-daemon</id>
    <content type="html"><![CDATA[<p>1 nano /etc/default/rsync
<code>
RSYNC_ENABLE=inetd
</code></p>

<p>2
<code>
sudo apt-get install xinetd
</code></p>

<p>3 create file  /etc/xinetd.d/rsync (the same as below)
```
service rsync
{</p>

<pre><code>disable = no
socket_type = stream
wait = no
user = root  # must be root
server = /usr/bin/rsync
server_args = --daemon
log_on_failure += USERID
flags = IPv6
</code></pre>

<p>}
```</p>

<p>4 create file /etc/rsyncd.conf
```
max connections = 20
log file = /var/log/rsync.log
timeout = 300</p>

<p>[share] # module name
comment = Public Share
path = /home/share
read only = yes
list = yes
uid = nobody
gid = nogroup
auth users = test_rsync  # the user to auth to rsync,
secrets file = /etc/rsyncd.secrets
```</p>

<p>5 create file /etc/rsyncd.secrets for password
sudo nano /etc/rsyncd.secrets
```
rsync_user:rsync_password</p>

<h1>other users &hellip;</h1>

<p>```</p>

<p>sudo chmod 600 /etc/rsyncd.secrets</p>

<p>6 restart
<code>
sudo /etc/init.d/xinetd restart
</code></p>

<p>7 create password file in client side
sudo nano /etc/rsync.secrets
<code>
rsync_password
</code>
sudo chmod 600 /etc/rsync.secrets</p>

<p>8 have a test in client side
<code>
rsync -azhrvcP --delete --password-file=/etc/rsync.secrets  rsync_user@server_ip::share  /home/user/demo
</code></p>

<p>ref
<code>
https://help.ubuntu.com/community/rsync
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hourly Cron Job in Ubuntu]]></title>
    <link href="http://andylinid45.github.io/blog/2018/09/03/hourly-cron-job-in-ubuntu/"/>
    <updated>2018-09-03T15:34:13+08:00</updated>
    <id>http://andylinid45.github.io/blog/2018/09/03/hourly-cron-job-in-ubuntu</id>
    <content type="html"><![CDATA[<p>```
cd /etc/cron.hourly
sudo nano test1</p>

<h1>the job script start with #!/bin/bash</h1>

<p>sudo chmod +x test1</p>

<h1>hava a test</h1>

<p>run-parts &mdash;report &mdash;test /etc/cron.hourly
run-parts &mdash;report /etc/cron.hourly
```</p>

<p><code>
https://askubuntu.com/questions/2368/how-do-i-set-up-a-cron-job
https://help.ubuntu.com/community/CronHowto
https://askubuntu.com/questions/7676/function-of-etc-cron-hourly
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update Kernel in Ubuntu With Command Line]]></title>
    <link href="http://andylinid45.github.io/blog/2017/09/04/update-kernel-in-ubuntu-with-command-line/"/>
    <updated>2017-09-04T10:59:48+08:00</updated>
    <id>http://andylinid45.github.io/blog/2017/09/04/update-kernel-in-ubuntu-with-command-line</id>
    <content type="html"><![CDATA[<p>check the kernel version
<code>
uname -r
</code></p>

<p><code>
sudo apt-get update
apt-cache search linux-image
</code></p>

<p>pick up a version, 4.11.0-14 for example
<code>
sudo apt-get install linux-image-4.11.0-14-generic linux-image-extra-4.11.0-14-generic  linux-headers-4.11.0-14-generic
</code></p>

<p>need reboot after installed!</p>

<p>remove the old kernels
<code>
sudo apt-get autoremove
</code></p>

<p>check the result
<code>
uname -r
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Make Wget Multithreading?]]></title>
    <link href="http://andylinid45.github.io/blog/2017/09/01/how-to-make-wget-multithreading/"/>
    <updated>2017-09-01T14:58:41+08:00</updated>
    <id>http://andylinid45.github.io/blog/2017/09/01/how-to-make-wget-multithreading</id>
    <content type="html"><![CDATA[<p>try axel</p>

<p>```
sudo apt-get install axel
axel -a -n [Num_of_Thread] link1 link2 link3 &hellip;</p>

<h1>-a just show an improved progress bar.</h1>

<p>```</p>

<p><code>
http://askubuntu.com/questions/214018/how-to-make-wget-faster-or-multithreading
</code></p>
]]></content>
  </entry>
  
</feed>
